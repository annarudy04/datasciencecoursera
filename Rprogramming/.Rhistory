class(flag_colors)
class(lapply(flag_colors, sum))
sapply(flag_colors, sum)
class(sapply(flag_colors, sum))
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range())
shape_mat <- sapply(flag_shapes, range
)
shape_mat
sapply(flag_shapes, range)
head(flag_shapes)
sapply(flag_shapes, range)
class(sapply(flag_shapes, range))
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
head(flag_shapes)
head(flags)
head(flags{1:3})
head(flags[1:3])
lapply(flags[1:3], unique)
head(flags[1:10, 1:3])
head(lapply(flags[1:3], unique))
lapply(flags[1:10, 1:3])
lapply(flags[1:10, 1:3], unique)
class(lapply(flags[1:10, 1:3], unique))
class(sapply(flags[1:10, 1:3], unique))
lapply(unique_values, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
sapply(lapply(flags, unique), count.fields)
sapply(lapply(flags, unique), sum)
sapply(lapply(flags, unique), count)
sapply(lapply(flags, unique), length)
vapply(flags, unique, numeric(1))
sapply(lapply(flags[1:3], unique), length)
vapply(flags[1:3], unique, numeric(1))
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
sapply(flags[1:3], class)
vapply(flags, class, character(1))
vapply(flags[1:3], class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$zone, mean)
tapply(flags$area, flags$zone, mean)
tapply(flags$population, flags$read, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
iris
head(iris)
iris$Sepal.Length
source("cachematrix.R")
getwd
getwd()
setwd("Rprogramming")
getwed
getwd
setwd("ProgrammingAssignment2")
source("cachematrix.R")
mat <- matrix(1:20, 4, 5)
mat
makeCacheMatrix(mat)
cacheSolve(mat)
mat_obj <- makeCacheMatrix(mat)
mat_ojb
mat_obj
cacheSolve(mat_obj)
mat_obj$inv
mat_obj$getinv()
source("cachematrix.R")
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix(matrix(1:20, 4, 5)))
cacheSolve(makeCacheMatrix(matrix(1:20, 4, 4)))
cacheSolve(makeCacheMatrix(matrix(c(38, 21, 4,12), 2, 2)))
cacheSolve(makeCacheMatrix(matrix(c(38, 21, 4,12), 2, 2)))
cacheSolve(makeCacheMatrix(matrix(c(38, 21, 4,12), 2, 2)))
mat_obj <- makeCacheMatrix(matrix(c(38, 21, 4,12), 2, 2)
)
mat_ojb
mat_obj
mat_obj$x
mat_obj$get
cacheSolve(mat_obj)
cacheSolve(mat_obj)
cacheSolve(mat_obj)
mat_obj$x
mat_obj$y
mat_obj$get()
source("cachematrix.R")
mat_obj <- makeCacheMatrix(matrix(c(38, 21, 4,12), 2, 2)
)
mat_obj$get()
cacheSolve(mat_obj)
cacheSolve(mat_obj)
source("cachematrix.R")
x <- matrix(c(1, 3, 2, 1), 4, 1)
x
y <- matrix(c(2, 4, 5, 6), 1, 4
)
y
x %*% y
y %*% x
A <- matrix(c(1, 0), c(0, 1))
A <- matrix(c(1, 0, 0, 1), 2, 2)
A
A <- matrix(c(1, 0, 0, 1, 1/3), 2, 2)
A <- matrix(c(1, 0, 0, 1, 1/3, 1/4), 2, 3)
A
r <- c(6, 2, 3)
r
A %*% r
s1 <- 4/13
s2 <- -3/13
s3 <- -12/13
-s1/s3
-s2/s3
getwd()
setwd("/Users/annarudy/datasciencecoursera/Rprogramming/")
source("QuizWeek3")
source("QuizWeek3.R")
source("QuizWeek3.R")
library(datasets)
data(iris)
iris?Sepal.Length
iris
iris$Sepal.Length
iris["Sepal.Length"]
mean(iris$Sepal.Length)
head(iris)
source("QuizWeek3.R")
q1()
virgincia <- subset(iris, iris["Species"] == 'virgincia')
virgincia
virginica <- subset(iris, iris["Species"] == 'virginica')
virginica
virginica <- subset(iris, iris$Species == 'virginica')
virginica
mean(virginica$Sepal.Length)
mean(virginica["Sepal.Length"])
source("QuizWeek3.R")
q1()
source("QuizWeek3.R")
q1()
source("QuizWeek3.R")
q1()
class(q1())
class(tapply(iris$Sepal.Length, iris$Species, mean))
tapply(iris$Sepal.Length, iris$Species, mean)
names(tapply(iris$Sepal.Length, iris$Species, mean))
source("QuizWeek3.R")
q1()
source("QuizWeek3.R")
q1()
source("QuizWeek3.R")
q2()
mat <- matrix(1:20, 4, 5)
mat
class(mat)
lapply(mat, mean)
l <- list(c(3, 4))
l
l <- list(3, 4
)
l
class(l)
l[1]
class(l[1])
class(l[[1]])
mini_df <- iris[1:3, ]
mini_df
mini_df[1]
type(mini_df[1])
class(mini_df[1])
mini_df[[1]]
class(mini_df[[1]])
mini_df["Sepal.Length"]
class(mini_df["Sepal.Length"])
mini_df$Sepal.Length
class(mini_df$Sepal.Length)
mat
apply(mat, 1, mean)
apply(mat, 1, mean)
apply(mat, 2, mean)
row_means <- apply(mat, 1, mean)
row_means
class(row_means)
rowMeans(mat)
class(rowMeans(mat))
rowMeans(iri)
colMeans(mini_iris)
colMeans(mini_df)
mini_iris
mini_df
colMeans(mini_df[1:4])
apply(iris[, 1:4], 2, mean)
class(iris)
class(apply(iris[, 1:4], 2, mean))
source("QuizWeek3.R")
q2()
source("QuizWeek3.R")
source("QuizWeek3.R")
q3()
data <- c("East","West","East","North","North","East","West")
is.factor(data)
factor_data <- factor(data)
factor_data
is.factor(data)
is.factor(factor_data)
levels <- gl(2, 3, labels=c("Male", "Female"))
levels
is.factor(levels)
gender_factor <- gl(2, 3, labels=c("Male", "Female"))
gender_factor
gender_factor <- gl(2, 3, labels=c("Male", "Female"), ordered=TRUE)
gender_factor
names(iris)
is.factor(iris["Sepal.Length"])
is.factor(iris$Sepal.Length)
names(iris)
sapply(iris, class)
class(iris$Species)
class(iris["Species"])
head(iris)
sapply(iris, class)
factor_data
levels(factor_data)
levels(factor_data) <- c("West", "North", "East")
levels(factor_data)
factor_data
levels(iris)
levels(iris$Species)
split(iris, iris$Species)
mini_df
mini_df$Species <- ("setosa", "versicolor", "virginica")
mini_df$Species <- c("setosa", "versicolor", "virginica")
mini_df
mini_df$Species <- c("setosa", "versicolor", "virginica", "versicolor")
mini_df <- iris[5,]
mini_df
mini_df <- iris[1:5,]
mini_df
mini_df$Species <- c("setosa", "versicolor", "virginica", "versicolor", "versicolor", "setosa")
mini_df$Species <- c("setosa", "versicolor", "virginica", "versicolor", "setosa")
mini_df
split(mini_df, mini_df$Species)
levels(mini_df) <- c("virginica", "versicolor", "setosa")
split(mini_df, mini_df$Species)
mini_df$Secies
mini_df$Species
levels(mini_df)
food <- factor(c("low", "med", "high"))
food
food <- factor(c("low", "medium", "high"))
food
food <- factor(c("low", "medium", "high", "medium", "low"))
food
min(food)
ordered(food)
ordered(food) <- TRUE
is.ordered(food) <- TRUE
is.ordered(food)
ordered(food) <- TRUE
food <- factor(food, levels=c("low", "medium", "high"), ordered=TRUE)
levels(food)
is.ordered(food)
min(food)
levles(food) <- c("high", "medium", "low")
levels(food) <- c("high", "medium", "low")
food
min(food)
food
food <- factor(food, levels <- c("high", "medium", "low"), ordered=TRUE)
min(food)
mini_df
split(mini_df$Sepal.Length, mini_df$Species)
class(split(mini_df$Sepal.Length, mini_df$Species))
sapply(split(mini_df$Sepal.Length, mini_df$Species), mean)
lapply(split(mini_df$Sepal.Length, mini_df$Species), mean)
apply(split(mini_df$Sepal.Length, mini_df$Species),2, mean)
dim(split(mini_df$Sepal.Length, mini_df$Species))
tapply(mini_df$Sepal.Length, mini_df$Secies,mean )
tapply(mini_df$Sepal.Length, mini_df$Species,mean )
with(mini_df, Petal.Length * Petal.Heigth)
with(mini_df, Petal.Length * Petal.Height)
with(mini_df, Petal.Length * Petal.Width)
with(mini_df, mini_df$Petal.Length * mini_df$Petal.Width)
mini_df$Petal.Length * mini_df$Petal.Width
mean(mtcars$mpg)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(mtcars, mean)
apply(mtcars, 3, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
source("QuizWeek3.R")
q4()
source("QuizWeek3.R")
q4()
source("QuizWeek3.R")
q4()
source("QuizWeek3.R")
q4()
source("QuizWeek3.R")
q4()
subset(mtcars, cyl==4)
mean(subset(mtcars, cyl==4)$hp)
subset(mtcars, cyl==4)
source("QuizWeek3.R")
q4()
apply(mtcars, 1, mean)
apply(mtcars, 2, mean)
class(apply(mtcars, 2, mean))
mat
split(mat[,1], factor(c(1, 2, 3)))
split(mat[,1], factor(c(1, 2, 3, 4)))
tapply(mtcars$hp, mtcars$cyl, mean)
class(tapply(mtcars$hp, mtcars$cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)[1, 1]
dim(tapply(mtcars$hp, mtcars$cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)[1]
names(mtcars)
tapply(mtcars[4], mtcars$cyl, mean)[1]
tapply(mtcars[[4]], mtcars$cyl, mean)[1]
tapply(mtcars[[4:5]], mtcars$cyl, mean)[1]
mini_df
str(mini_df)
summary(mini_df)
class(summary(mini_df))
class(summary(mini_df$Sepal.Length))
summary(c(1,2,3,4,5))
class(summary(c(1,2,3,4,5)))
class(str(mini_df))
class(str(c(1,2,3,4)))
vec <- c(1,2,3,4,5)
summary(vec)
str(vec)
summary(mini_df)
str(mini_df)
rnorm(5, 2, .5)
rnorm(5, 10, 2)
set.seed(1)
rnorm(5, 10, 2)
rnorm(5, 10, 2)
rnorm(5, 10, 2)
set.seed(1)
rnorm(5, 10, 2)
system.time(print("hello"))
class(system.time(print("hello")))
class(system.time(print("hello")))
svd?
?
?
''
?svd
hilbert <- function(n){}
?hilbert
source("systimeprac.R")
source("systimeprac.R")
source("systimeprac.R")
x <- hilbert(1000)
print(system.time(svd(x)))
hilbert(1000)
system.time(hilbert(1000))
source("systimeprac.R")
test_fx(1000)
system.time(test_fx(1000))
system.time(test_fx(10))
source("systimeprac.R")
test_fx(10)
source("systimeprac.R")
test_fx(10)
source("systimeprac.R")
test_fx(10)
source("systimeprac.R")
test_fx(10)
system.time(test_fx(1000))
system.time(test_fx(10000000))
class(system.time(test_fx(10000000)))
Rprof()
Rprof(print("Hello"))
Rprof(q4())
Rprof(tmp <- tempfile())
q4()
Rprof()
summaryRprof(tmp)
source("QuizWeek3.R")
q4()
Rprof(tmp <- tempfile())
q4()
Rprof()
summaryRprof(tmp)
Rprof()
q4()
Rprof(NULL)
summaryRprof("Rprof.out")
Rprof("Rprof.out")
q4()
Rprof(NULL)
summaryRprof("Rprof.out")
Rprof("Rprof.out")
q4()
source("QuizWeek3.R")
q4()
summaryRprof("Rprof.out")
Rprof()
Rprof()
source("QuizWeek3.R")
Rprof()
q4()
summaryRprof()
Rprof(NULL)
summaryRprof()
Rprof()
q4()
Rprof(NULL)
summaryRprof()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sampe(LETTERS)
sample(LETTERS)
sample(100, c(1, 0), prob=c(.3, .7))
sample(100, c(1, 0), prob=c(0.3, 0.7))
sample(c(1, 0), 100, prob=c(0.3, 0.7))
sample(c(1, 0), 100, prob=c(0.3, 0.7), replace=TRUE)
sample(c(0,1), 100, prob=c(0.3, 0.7), replace=TRUE)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips <-
| sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=.7)
flips2 <- rbinom(\)
flips2 <- rbinom()
flips2 <- rbinom(10)
flips2 <- rbinom(10, 10, .3)
flips <- rbinom(100, 1, .7)
flips2 <- rbinom(100, 1, .7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <0 colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$sped, y=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=dist, y=speed)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars, )
boxplot(formula = mpg ~ cyl, data = mtcars )
hist(mtcars$mpg)
